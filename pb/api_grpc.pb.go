// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	Create(ctx context.Context, in *LaunchConfiguration, opts ...grpc.CallOption) (*ProcessHandle, error)
	Stop(ctx context.Context, in *ProcessHandle, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Status(ctx context.Context, in *ProcessHandle, opts ...grpc.CallOption) (*ProcessStatus, error)
	Output(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (WorkerService_OutputClient, error)
	Error(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (WorkerService_ErrorClient, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) Create(ctx context.Context, in *LaunchConfiguration, opts ...grpc.CallOption) (*ProcessHandle, error) {
	out := new(ProcessHandle)
	err := c.cc.Invoke(ctx, "/WorkerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Stop(ctx context.Context, in *ProcessHandle, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/WorkerService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Status(ctx context.Context, in *ProcessHandle, opts ...grpc.CallOption) (*ProcessStatus, error) {
	out := new(ProcessStatus)
	err := c.cc.Invoke(ctx, "/WorkerService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Output(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (WorkerService_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerService_ServiceDesc.Streams[0], "/WorkerService/Output", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerServiceOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkerService_OutputClient interface {
	Recv() (*ProcessOutput, error)
	grpc.ClientStream
}

type workerServiceOutputClient struct {
	grpc.ClientStream
}

func (x *workerServiceOutputClient) Recv() (*ProcessOutput, error) {
	m := new(ProcessOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerServiceClient) Error(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (WorkerService_ErrorClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerService_ServiceDesc.Streams[1], "/WorkerService/Error", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerServiceErrorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkerService_ErrorClient interface {
	Recv() (*ProcessOutput, error)
	grpc.ClientStream
}

type workerServiceErrorClient struct {
	grpc.ClientStream
}

func (x *workerServiceErrorClient) Recv() (*ProcessOutput, error) {
	m := new(ProcessOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	Create(context.Context, *LaunchConfiguration) (*ProcessHandle, error)
	Stop(context.Context, *ProcessHandle) (*emptypb.Empty, error)
	Status(context.Context, *ProcessHandle) (*ProcessStatus, error)
	Output(*OutputRequest, WorkerService_OutputServer) error
	Error(*OutputRequest, WorkerService_ErrorServer) error
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) Create(context.Context, *LaunchConfiguration) (*ProcessHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkerServiceServer) Stop(context.Context, *ProcessHandle) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedWorkerServiceServer) Status(context.Context, *ProcessHandle) (*ProcessStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedWorkerServiceServer) Output(*OutputRequest, WorkerService_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedWorkerServiceServer) Error(*OutputRequest, WorkerService_ErrorServer) error {
	return status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Create(ctx, req.(*LaunchConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkerService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Stop(ctx, req.(*ProcessHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkerService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Status(ctx, req.(*ProcessHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServiceServer).Output(m, &workerServiceOutputServer{stream})
}

type WorkerService_OutputServer interface {
	Send(*ProcessOutput) error
	grpc.ServerStream
}

type workerServiceOutputServer struct {
	grpc.ServerStream
}

func (x *workerServiceOutputServer) Send(m *ProcessOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkerService_Error_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServiceServer).Error(m, &workerServiceErrorServer{stream})
}

type WorkerService_ErrorServer interface {
	Send(*ProcessOutput) error
	grpc.ServerStream
}

type workerServiceErrorServer struct {
	grpc.ServerStream
}

func (x *workerServiceErrorServer) Send(m *ProcessOutput) error {
	return x.ServerStream.SendMsg(m)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WorkerService_Create_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _WorkerService_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _WorkerService_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Output",
			Handler:       _WorkerService_Output_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Error",
			Handler:       _WorkerService_Error_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/api.proto",
}
